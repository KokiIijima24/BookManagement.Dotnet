---
openapi: 3.0.1
info:
  title: BookManagement.API
  version: '1.0'
  description: |
    TDDを体験するために作成したサンプルコードの仕様書です。
    書籍管理を行うAPIを作成。

    ### What is Test Driven Development (TDD)?:

      * write a “single” unit test describing an aspect of the program（テストは一つのことをすること）
      * run the test, which should fail because the program lacks that feature（テストを走らせたら失敗すること）
      * write “just enough” code, the simplest possible, to make the test pass（テストを通すためにソースコードは必要最低限のものを書くこと）
      * “refactor” the code until it conforms to the simplicity criteria（ソースコードの重複を避けること）
      * repeat, “accumulating” unit tests over time（テストは繰り返し走らせること）

paths:
  "/api/Book":
    get:
      tags:
      - Book
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Book"
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Book"
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Book"
    post:
      tags:
      - Book
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Book"
          text/json:
            schema:
              "$ref": "#/components/schemas/Book"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/Book"
      responses:
        '200':
          description: Success
    put:
      tags:
      - Book
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Book"
          text/json:
            schema:
              "$ref": "#/components/schemas/Book"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/Book"
      responses:
        '200':
          description: Success
  "/api/Book/{id}":
    get:
      tags:
      - Book
      parameters:
      - name: isbn
        in: query
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/Book"
            application/json:
              schema:
                "$ref": "#/components/schemas/Book"
            text/json:
              schema:
                "$ref": "#/components/schemas/Book"
  "/api/Book/id":
    delete:
      tags:
      - Book
      parameters:
      - name: isbn
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Success
  "/api/BookRegist":
    get:
      tags:
      - BookRegist
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Register"
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Register"
            text/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Register"
    post:
      tags:
      - BookRegist
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Register"
          text/json:
            schema:
              "$ref": "#/components/schemas/Register"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/Register"
      responses:
        '200':
          description: Success
    put:
      tags:
      - BookRegist
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Register"
          text/json:
            schema:
              "$ref": "#/components/schemas/Register"
          application/*+json:
            schema:
              "$ref": "#/components/schemas/Register"
      responses:
        '200':
          description: Success
  "/api/BookRegist/{id}":
    get:
      tags:
      - BookRegist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                "$ref": "#/components/schemas/Register"
            application/json:
              schema:
                "$ref": "#/components/schemas/Register"
            text/json:
              schema:
                "$ref": "#/components/schemas/Register"
  "/api/BookRegist/id":
    delete:
      tags:
      - BookRegist
      parameters:
      - name: id
        in: query
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
components:
  schemas:
    Book:
      type: object
      properties:
        isbn:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        registerId:
          type: integer
          format: int32
      additionalProperties: false
    Register:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        age:
          maximum: 60
          minimum: 0
          type: integer
          format: int32
      additionalProperties: false
